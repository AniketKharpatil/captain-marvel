ip=[['','START','200',''],
   ['','MOVR','AREG','DATA'],
   ['','MOVR','BREG','=4'],
   ['X','EQU','10',''],
   ['','LTORG','',''],
   ['DATA','DC','4',''],
   ['ST','DS','10',''],
   ['','MOVR','CREG','=5'],
   ['','END','','']]
instruction=['LTORG','MOVR','DC']
instruction1=['START','EQU','END','DS']
reg=['AREG','BREG','CREG']
lc=[]
lt=0

for z in ip:
    s=z[1]
    if s=='START':
        lt=int(z[2])
        lc.append(lt)
    elif s=='DS':
        lt=lt+int(z[2])
    elif s in instruction:
        lt=lt+1
    elif s=='END':
        break
    lc.append(lt)

st={}
for x in range(len(ip)):
    tempx=ip[x]
    for yn in range (len(tempx)):
        y=tempx[yn]
        if y not in reg and y not in instruction and y not in instruction1 and y.isalpha():
            if y in st.keys():
                st.update({y:lc[x]})
            elif yn==3:
                st[y]= '-'
            elif tempx[1]=='EQU':
                st[y] = tempx[2]
            elif yn==0:
                st[y]=lc[x]
                
literal={}
for x in range(len(ip)):
    if 'LTORG' in ip[x]:
        lit=x

for x in range(len(ip)):
    tempx=ip[x]
    if tempx[3]:
        k = tempx[3]
        if k[0]=='=':
            if x<lit: 
                literal[k]=lc[lit]
            else:
                literal[k]=lc[-1]
                lc.append(lc[-1]+1)

print('symbol table')
index=0
for n in st:
    print(index, n, '\t', st[n], '\t', '1')
    index+=1
print()
print('literal table')
index=0
for n in literal:
    print(index, n, '\t', literal[n])
    index+=1   
print()

print(lc)
print()

print("intermediate code")

cmd_val = {'START':['AD',1],'MOVER':['IS',4],'DC':['DL',2],'DS':['DL',1],
        'EQU':['AD',3],'LTORG':['AD',5],'END':['AD',2] 
}
rg_val = {'AREG':1,'BREG':2,'CREG':3}
st = {'DATA':[0,203],'ST':[1,204]}
LT = {'=4':[0,203],'=5':[1,226]}

for i in range(len(ip)):
    
    for j in range(len(ip[i])):
        if ip[i][j] in cmd_val:
            val = cmd_val[ip[i][j]]
            print(f'({val[0]},{val[1]})',end='')
            if ip[i][j] == 'LTORG':
                print(f'(DL,2)(C,1)',end='')
                
        elif ip[i][j] in rg_val:
            val = rg_val[ip[i][j]]
            print(f'(RG,{val})',end='')
            
        elif ip[i][j] in st:
            print(f'(S,{st[ip[i][j]][0]})',end='')
            
        elif ip[i][j] in LT:
            print(f'(L,{LT[ip[i][j]][0]})',end='')
            
        elif ip[i][j].isdigit():
            print(f'(C,{ip[i][j]})',end='')
    print()
    
